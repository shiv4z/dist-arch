package in.gov.egs.security.jwt;

import io.jsonwebtoken.*;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import in.gov.egs.security.services.UserDetailsImpl;

import java.security.Key;
import java.util.Date;

import javax.crypto.SecretKey;

@Component
public class JwtUtils {
  private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);

  @Value("${app.jwt.secret}")
  private String secretKey;

  @Value("${app.jwt.expiration}")
  private long expirationTime;

  public String generateJwtToken(Authentication authentication) {
      UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();

      return Jwts.builder()
              .subject(userPrincipal.getUsername()) 
              .issuedAt(new Date())              
              .expiration(new Date(System.currentTimeMillis() + expirationTime)) 
              .signWith(key(), Jwts.SIG.HS256)      
              .compact();
  }
  
  private SecretKey key() {
      return Keys.hmacShaKeyFor(Decoders.BASE64.decode(jwtSecret)); // âœ… Returns correct SecretKey
  }

  public String getUserNameFromJwtToken(String token) {
      return extractClaim(token, Claims::getSubject);
  }

  public boolean validateJwtToken(String token) {
      try {
          Jwts.parser() 
              .verifyWith(key())
              .build()
              .parseSignedClaims(token);

          return true;
      } catch (JwtException e) {
          System.err.println("JWT validation error: " + e.getMessage());
      }
      return false;
  }
}

