package in.gov.egs.security.jwt;

import java.util.Date;
import java.util.function.Function;

import javax.crypto.SecretKey;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import in.gov.egs.security.services.UserDetailsImpl;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtils {
  private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);

  @Value("${app.jwt.secret}")
  private String secretKey;

  @Value("${app.jwt.expiration}")
  private long expirationTime;

  public String generateJwtToken(Authentication authentication) {
      UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();

      return Jwts.builder()
              .subject(userPrincipal.getUsername()) 
              .issuedAt(new Date())              
              .expiration(new Date(System.currentTimeMillis() + expirationTime)) 
              .signWith(key(), Jwts.SIG.HS256)      
              .compact();
  }
  
  private SecretKey key() {
      return Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey)); 
  }

  public String getUserNameFromJwtToken(String token) {
      return extractClaim(token, Claims::getSubject);
  }

  public boolean validateJwtToken(String token) {
      try {
          Jwts.parser() 
              .verifyWith(key())
              .build()
              .parseSignedClaims(token);

          return true;
      } catch (MalformedJwtException e) {
          logger.error("Invalid JWT token: {}", e.getMessage());
      } catch (ExpiredJwtException e) {
        logger.error("JWT token is expired: {}", e.getMessage());
      } catch (UnsupportedJwtException e) {
        logger.error("JWT token is unsupported: {}", e.getMessage());
      } catch (IllegalArgumentException e) {
        logger.error("JWT claims string is empty: {}", e.getMessage());
      }

      return false;
  }
  
  public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
      Claims claims = Jwts.parser()
              .verifyWith(key())  
              .build()
              .parseSignedClaims(token)
              .getPayload();
      return claimsResolver.apply(claims);
  }
}

